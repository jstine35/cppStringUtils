#!/bin/bash

# build a temp file and copy it only iff an actual difference is detected.
# avoids unnecessary rebuild and relink operations.

tmpfile=$(mktemp /tmp/revision.XXXXXX)
outfile=${1:-./revision.h}

trap "rm -f $tmpfile" EXIT

# expectation is the build script or environment provides a meaningful BUILD_TIMESTAMP.
# If we generate one here it causes unnecessary rebuilds.

#BUILD_TIMESTAMP=$(date -u +"%Y%m%d-%H%M")

>  $tmpfile  echo "// auto-generated by gen_revision_info.sh"
>> $tmpfile  echo
>> $tmpfile  echo "#define GIT_CUR_COMMIT    \"$(git rev-parse --verify     HEAD )\""
>> $tmpfile  echo "#define GIT_BRANCH        \"$(git rev-parse --abbrev-ref HEAD )\""

if [[ -n "$BUILD_TIMESTAMP" ]]; then
>> $tmpfile  echo "#define BUILD_TIMESTAMP   \"$BUILD_TIMESTAMP\""
fi

if [[ -n "$JENKINS_JOB_NAME" ]]; then
>> $tmpfile  echo "#define JENKINS_JOB_NAME   \"$JENKINS_JOB_NAME\""
fi

if [[ -n "$JENKINS_JOB_NUMBER" ]]; then
>> $tmpfile  echo "#define JENKINS_JOB_NUMBER \"$JENKINS_JOB_NUMBER\""
fi

if ! diff -q $tmpfile "$outfile" &>/dev/null; then
	echo "Updating revision info -> $outfile"
	cp $tmpfile "$outfile"
fi

# no build timestamp, it causes unnecessary rebuilds when no modification occurred.
#>> "$outfile"  echo "#define BUILD_TIMESTAMP  \"$(date -u +"%Y%m%d-%H%M"          )\""

